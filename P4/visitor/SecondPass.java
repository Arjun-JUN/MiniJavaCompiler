//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SecondPass<R,A> implements GJVisitor<String,String> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

/*-------------------------------------------------------------------------------*/
/*- - - - - - - - - - - - - - - - - GLOBAL VARS - - - - - - - - - - - - - - - - -*/
   public Vector<ProcedureNode> procedureList = new Vector<ProcedureNode>();

   ProcedureNode  currProcedure;
   Integer        procIndex = 0;
   Integer        aCount = 0;
   Integer        stackPointer = 0;
   Integer        numTemp = null;
   Integer        lineCount = 0;
   Integer        globalTempNum = 0;


   /*--------- FLAGS ---------*/
   Boolean PRINT = true;
   Boolean DEBUG_STKLOCATION = false;
   /*--------- FLAGS ---------*/

/*- - - - - - - - - - - - - - - - - GLOBAL VARS - - - - - - - - - - - - - - - - -*/
/*-------------------------------------------------------------------------------*/


/*-------------------------------------------------------------------------------*/
/*- - - - - - - - - - - - - - - - - FUNCTIONS - - - - - - - - - - - - - - - - - -*/
  
/*- - - - - - - - - - - - - - - - - FUNCTIONS - - - - - - - - - - - - - - - - - -*/
/*-------------------------------------------------------------------------------*/


   public String visit(NodeList n, String argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, String argu) {
      if ( n.present() ) {
         String _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public String visit(NodeOptional n, String argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public String visit(NodeSequence n, String argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, String argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public String visit(Goal n, String argu) {
      String _ret=null;

      /*-------- PRINT --------*/
      if(PRINT){
         currProcedure = procedureList.get(0);
         procIndex++;
         stackPointer=0;
         System.out.println("MAIN [" + currProcedure.args + "] [" + currProcedure.stackSpace + "] [" + currProcedure.callArgs + "]");
      }
      /*-------- PRINT --------*/

      n.f0.accept(this, argu);
      lineCount=0;
      n.f1.accept(this, argu);
      lineCount=0;
      n.f2.accept(this, argu);

      /*-------- PRINT --------*/
      if(PRINT){
         System.out.println("END");
      }
      if(PRINT && currProcedure.isSpilled){
         System.out.println("// SPILLED");
      }
      else if(PRINT){
         System.out.println("// NOTSPILLED");
      }
      /*-------- PRINT --------*/

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n, String argu) {
      String _ret=null;
      n.f0.accept(this, "PRINT_LABEL");
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public String visit(Procedure n, String argu) {
      String _ret=null;

      /*-------- PRINT --------*/
      if(PRINT){
         currProcedure = procedureList.get(procIndex);
         procIndex++;
         System.out.println(n.f0.f0.tokenImage+" [" + currProcedure.args + "] [" + currProcedure.stackSpace + "] [" + currProcedure.callArgs + "]");
         stackPointer = 0;
         if(currProcedure.args > 4) stackPointer = currProcedure.args - 4;
         for(int i = 0 ; i < 8 ; i++)
            {System.out.println("    ASTORE SPILLEDARG "+(i+stackPointer)+" s"+i);}
         stackPointer+=8;

         for(int i = 0 ; i < currProcedure.args ; i++){
            String reg = currProcedure.register.get(i);
            if(i<4){
               if(reg==null){}
               else if(reg!= "SPILLEDARG" ){
                  System.out.println("  MOVE "+reg+" a"+i);
               }
               else if(reg=="SPILLEDARG"){
                  System.out.println("  ASTORE SPILLEDARG "+(stackPointer)+" a"+i);
                  currProcedure.stackLocation.put(i,stackPointer);
                  if(DEBUG_STKLOCATION)System.out.println("STKput1: "+currProcedure.stackLocation);
                  stackPointer++;
                  if(DEBUG_STKLOCATION)System.out.println("STKput2: "+currProcedure.stackLocation);
               }
            }
         }
      }
      /*-------- PRINT --------*/

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      lineCount=0;
      n.f4.accept(this, argu);
      lineCount=0;

      /*-------- PRINT -------*/
      if(PRINT && currProcedure.isSpilled){
         System.out.println("// SPILLED");
      }
      else if(PRINT){
         System.out.println("// NOTSPILLED");
      }
      /*-------- PRINT -------*/

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public String visit(Stmt n, String argu) {
      String _ret=null;
      n.f0.accept(this, "STMT");
      lineCount++;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);

      /* PRINT */
         if(PRINT){
            System.out.println("    NOOP");
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);

      /* PRINT */
         if(PRINT){
            System.out.println("    ERROR");
         }  
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n, String argu) {
      String _ret=null;

      n.f0.accept(this, argu);
      String reg = 
      n.f1.accept(this, argu);
      String label = 
      n.f2.accept(this, "JUMP_LABEL");
      
      /* PRINT */
         if(PRINT){
            System.out.println("    CJUMP "+reg+" "+label);
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n, String argu) {
      String _ret=null;
      
      n.f0.accept(this, argu);
      String label = 
      n.f1.accept(this, "JUMP_LABEL");

      /* PRINT */
         if(PRINT){
            System.out.println("    JUMP "+label);
         }  
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public String visit(HStoreStmt n, String argu) {
      String _ret=null;
      
      n.f0.accept(this, argu);
      String reg1 = 
      n.f1.accept(this, argu);
      String offset = 
      n.f2.accept(this, argu);
      String reg2 = 
      n.f3.accept(this, "SECOND_USE");

      /* PRINT */
         if(PRINT){
            System.out.println("    HSTORE "+reg1+" "+offset+" "+reg2);
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n, String argu) {
      String _ret=null;

      n.f0.accept(this, argu);
      String reg1 = 
      n.f1.accept(this, "DEF");
      String reg2 = 
      n.f2.accept(this, argu);
      String offset =
      n.f3.accept(this, argu);
      
      /* PRINT */
         if(PRINT){
            if(reg1.equals("To_ASTORE")){
               System.out.println("    HLOAD v1 "+reg2+" "+offset);
               System.out.println("    ASTORE SPILLEDARG "+currProcedure.stackLocation.get(globalTempNum)+" v1");
                  if(DEBUG_STKLOCATION)System.out.println("STKget: "+currProcedure.stackLocation);
            }
            else{
               System.out.println("    HLOAD "+reg1+" "+reg2+" "+offset);
            }
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String reg = 
      n.f1.accept(this, "DEF");


      String exp =
      n.f2.accept(this, argu);
      
      /* PRINT */
         if(PRINT){
            if(reg.equals("To_ASTORE")){
               System.out.println("    MOVE v1 "+exp);
               System.out.println("    ASTORE SPILLEDARG "+currProcedure.stackLocation.get(globalTempNum)+" v1");
                  if(DEBUG_STKLOCATION)System.out.println("STKget: "+currProcedure.stackLocation);
            }
            else System.out.println("    MOVE "+reg+" "+exp);
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public String visit(PrintStmt n, String argu) {
      String _ret=null;
      
      n.f0.accept(this, argu);
      String exp =
      n.f1.accept(this, argu);
      
      /* PRINT */
         if(PRINT){
            System.out.println("    PRINT "+exp);
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public String visit(Exp n, String argu) {
      String _ret=null;

      String exp =
      n.f0.accept(this, argu);

      /* PRINT */
         if(PRINT){
            _ret = exp;
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public String visit(StmtExp n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String retExp =
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      /* PRINT */
         if(PRINT){
            System.out.println("    MOVE v0 "+retExp);
            for(int i = 0 ; i < 8 ; i++)
               System.out.println("    ALOAD s"+i+" SPILLEDARG "+(i+Math.max(0,currProcedure.args-4)));
            System.out.println("END");
         }
      /* PRINT newline */

      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public String visit(Call n, String argu) {
      String _ret=null;

      /* PRINT */
         if(PRINT){
            for(int i = 0 ; i < 10 ; i++)
               System.out.println("    ASTORE SPILLEDARG "+(i+stackPointer)+" t"+i);
         }
      /* PRINT */

      n.f0.accept(this, argu);
      String reg = 
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      aCount = 0;
      n.f3.accept(this, "CALL");
      aCount = 0;
      n.f4.accept(this, argu);

      /* PRINT */
         if(PRINT){
            System.out.println("    CALL "+reg);
            for(int i = 0 ; i < 10 ; i++)
               System.out.println("    ALOAD t"+i+" SPILLEDARG "+(i+stackPointer) );
            _ret = "v0";
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public String visit(HAllocate n, String argu) {
      String _ret=null;

      n.f0.accept(this, argu);
      String exp =
      n.f1.accept(this, argu);

      /* PRINT */
         if(PRINT){
            _ret = "HALLOCATE "+exp;
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public String visit(BinOp n, String argu) {
      String _ret=null;

      String op =
      n.f0.accept(this, argu);
      String reg =
      n.f1.accept(this, argu);
      String exp =
      n.f2.accept(this, "SECOND_USE");

      /* PRINT */
         if(PRINT){
            _ret = op+" "+reg+" "+exp;
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public String visit(Operator n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      
      /* PRINT */
         if(PRINT){
            if(n.f0.which==0)_ret = ("LE" );
            if(n.f0.which==1)_ret = ("NE" );
            if(n.f0.which==2)_ret = ("PLUS" );
            if(n.f0.which==3)_ret = ("MINUS" );
            if(n.f0.which==4)_ret = ("TIMES" );
            if(n.f0.which==5)_ret = ("DIV");
         }
      /* PRINT */
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public String visit(SimpleExp n, String argu) {
      String _ret=null;

      String sexp = 
      n.f0.accept(this, argu);

      /* PRINT */
         if(PRINT){
            _ret = sexp;
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public String visit(Temp n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      /* PRINT */
         if(PRINT){
            numTemp = Integer.parseInt(n.f1.f0.tokenImage);
            int v = 1;
            if(argu!=null && argu.equals("SECOND_USE")){
                v = 0;
            }
            if(argu!=null && argu.equals("CALL")){
                v = 0;
            }
            String reg = null;
            if(currProcedure.register.containsKey(numTemp)){
               reg = currProcedure.register.get(numTemp);
               if(currProcedure.liveStart.get(numTemp) > lineCount){
                  reg = null;
               }
            }            
            if(reg == "SPILLEDARG"){
               _ret = "v"+v;
               if(argu!=null && argu.equals("DEF")){
                  globalTempNum = numTemp;
                  if(!currProcedure.stackLocation.containsKey(globalTempNum)){
                     currProcedure.stackLocation.put(globalTempNum,stackPointer);
                     stackPointer = stackPointer+1;
                  }
                  if(DEBUG_STKLOCATION)System.out.println("STKput3: "+currProcedure.stackLocation);
                  
                  _ret = "To_ASTORE";
               }
               else{
                  System.out.println("    ALOAD v"+v+" SPILLEDARG "+currProcedure.stackLocation.get(numTemp));
                  if(DEBUG_STKLOCATION)System.out.println("STKget: "+currProcedure.stackLocation);
               }
            }
            else if(reg == null){
               _ret = "v"+v;
            }
            else{
               _ret = reg;
            }
         }
         if(PRINT && argu!=null && argu.equals("CALL")){
            if(aCount<4)
               System.out.println("    MOVE a"+aCount + " " + _ret);
            else
               System.out.println("    PASSARG "+(aCount-3)+" "+_ret);

            aCount++;   
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);

      /* PRINT */
         if(PRINT){
            _ret = n.f0.tokenImage;
         }
      /* PRINT */

      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);

      /* PRINT */
         if(PRINT){
            _ret = n.f0.tokenImage;
         }
         if(PRINT && argu!=null && argu.equals("PRINT_LABEL")){
            System.out.println(n.f0.tokenImage+currProcedure.label);
         }
         if(PRINT && argu!=null && argu.equals("JUMP_LABEL")){
            _ret = n.f0.tokenImage+currProcedure.label;
         }
      /* PRINT */

      return _ret;
   }

}
